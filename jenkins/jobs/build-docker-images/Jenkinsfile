// this bit is just plain Jenkins Groovy
def secretsDirectory = new File("/secret/jenkins-secrets").exists() ? new File("/secret/jenkins-secrets") : new File("/var/jenkins_secrets");
def randomUUID = "${UUID.randomUUID().toString()}"
def randomLabel = "jenkins-worker-${randomUUID}"
def dockerRegistryAddress = new File(secretsDirectory, "dockerRegistryAddress").text.trim();
def jenkinsAgentImageTag = new File(secretsDirectory, "cloudOpsForKubernetesDefaultBranch").text.trim().replace('/','-');

def sharedSteps() {
  // load EP Groovy Library
  eplib = load "cloudops-for-kubernetes/lib/eplib.groovy"

  eplib.loginToCloud()
  eplib.loginToDockerRegistry()
}

def cloneDockerCode() {
  dir ('docker') {
    script {
      eplib.gitShallowClone("${params.dockerRepoURL}", "${params.dockerBranch}", "${params.dockerCredentialId}")
    }
  }
}

def downloadDeploymentPackage() {
  if ( "${params.deploymentPackageUrl}" == "" ) {
    copyArtifacts(projectName: 'build-deployment-package', filter: 'output.json', , target: '.',
      parameters: "epCommerceRepoURL=" + epCommerceRepoURL + ",epCommerceBranch=" + epCommerceBranch);
    def buildDeploymentPackageOutput = readJSON file: 'output.json'
    assert buildDeploymentPackageOutput['epCommercePlatformAndExtensionVersion'] != ''
    def netrcFile = new File("/root/.netrc")
    netrcFile.write("machine " + nexusBaseUri + " login " + nexusRepoUsername + " password " + nexusRepoPassword + "\n")
    sh """
    curl -L -v "${nexusBaseUri}/nexus/service/local/artifact/maven/redirect?r=ep-releases&g=com.elasticpath.extensions&a=ext-deployment-package&p=zip&v=${buildDeploymentPackageOutput['epCommercePlatformAndExtensionVersion']}" > /root/deploymentpackage.zip
    """
  } else{
    sh """
    curl -L -v "${params.deploymentPackageUrl}" > /root/deploymentpackage.zip
    """
  }
}

def buildAndPushImage(String epAppInBuild) {
  sharedSteps()
  cloneDockerCode()
  downloadDeploymentPackage()
  sh """
    sed -i -e "s/`grep 'epApps' docker/EpImageBuilder/config/ep-image-builder.conf | awk -F'"' '{print \$2}'`/${epAppInBuild}/g" docker/EpImageBuilder/config/ep-image-builder.conf
    cd docker/EpImageBuilder/
    ./EpImageBuilder.sh --configFile config/ep-image-builder.conf --tomcatversion ${params.tomcatVersion} --deploymentPackage /root/deploymentpackage.zip --dockerRegistry ${dockerRegistryAddress} --namespace ep --dockerImageTag "${dockerImageTag}" --useImg
  """
}

// this is a workaround until this bug is fixed: https://issues.jenkins-ci.org/browse/JENKINS-56943
def podYamlFromFile = new File("${env.JENKINS_HOME}/workspace/build-docker-images@script/cloudops-for-kubernetes/jenkins/agents/kubernetes/docker-4gb-2core-1container.yaml").text.trim();
String podYaml = podYamlFromFile.replace('${dockerRegistryAddress}', "${dockerRegistryAddress}").replace('${jenkinsAgentImageTag}', "${jenkinsAgentImageTag}")

// this is the Pipeline DSL.
// Syntax here: https://jenkins.io/doc/book/pipeline/syntax/
// More useful docs: https://jenkins.io/doc/pipeline/steps/
pipeline {
  agent none
  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '10000'))
    timeout(time: 90, unit: 'MINUTES')
      }
  environment {
    dockerImageTag = "${params.dockerBranch}".replace('/','-');
  }
  stages {
    stage('Build and push the base, data-pop-tool, and mysql images') {
      parallel {
        stage('Build and push the base images') {
          agent { kubernetes { label "${randomLabel}-1"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker') {
              script {
                sharedSteps()
                cloneDockerCode()
              }

              sh """
              cd docker/ThirdPartyBuildFiles/
              ./BaseImageBuilder.sh --tomcatversion ${params.tomcatVersion} --dockerRegistry ${dockerRegistryAddress} --namespace ep --useImg
              """
            }
          }
        }
        stage('Build and push the data-pop-tool image') {
          agent { kubernetes { label "${randomLabel}-2"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker') {
              script {
                sharedSteps()
                cloneDockerCode()
                downloadDeploymentPackage()
              }

              sh """
              cd docker/data-pop-tool/
              mv /root/deploymentpackage.zip ./ext-deployment-package-0.zip
              img build -t "${dockerRegistryAddress}/ep/data-pop-tool:${dockerImageTag}" .
              img push "${dockerRegistryAddress}/ep/data-pop-tool:${dockerImageTag}"
              rm ./ext-deployment-package-0.zip
              """
            }
          }
        }
        stage('Build and push the mysql image') {
          agent { kubernetes { label "${randomLabel}-3"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker') {
              script {
                sharedSteps()
                cloneDockerCode()
              }

              sh """
              cd docker/EpImageBuilder/
              ./EpDbImageBuilder.sh --dockerRegistry ${dockerRegistryAddress} --namespace ep --dockerImageTag "${dockerImageTag}" --useImg
              """
            }
          }
        }
      }
    }
    stage('Build and push the app, activemq images, and info page') {
      parallel {
        stage('Build and push the cortex image') {
          agent { kubernetes { label "${randomLabel}-0"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker') {
              script {
                buildAndPushImage("cortex")
              }  
            }
          }
        }
        stage('Build and push the search image') {
          agent { kubernetes { label "${randomLabel}-1"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker') {
              script {
                buildAndPushImage("search")
              }  
            }
          }
        }
        stage('Build and push the batch image') {
          agent { kubernetes { label "${randomLabel}-2"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker') {
              script {
                buildAndPushImage("batch")
              }  
            }
          }
        }
        stage('Build and push the integration image') {
          agent { kubernetes { label "${randomLabel}-3"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker') {
              script {
                buildAndPushImage("integration")
              }  
            }
          }
        }
        stage('Build and push the cm image') {
          agent { kubernetes { label "${randomLabel}-4"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker') {
              script {
                buildAndPushImage("cm")
              }  
            }
          }
        }
        stage('Build and push the data-sync image') {
          agent { kubernetes { label "${randomLabel}-5"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker') {
              script {
                buildAndPushImage("data-sync")
              }  
            }
          }
        }
        stage('Build and push the activemq image') {
          agent { kubernetes { label "${randomLabel}-6"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker') {
              script {
                sharedSteps()
                cloneDockerCode()
              }

              sh """
              cd docker/ThirdPartyBuildFiles/
              ./ActiveMqImageBuilder.sh --dockerRegistry ${dockerRegistryAddress} --namespace ep --dockerImageTag "${dockerImageTag}" --useImg
              """
            }
          }
        }
        stage('Build and push the info page image') {
          agent { kubernetes { label "${randomLabel}-7"; defaultContainer "jnlp"; yaml "${podYaml}" } }
          steps {
            container('docker'){
              script {
                sharedSteps()
              }
              sh """
              cd cloudops-for-kubernetes/info-page
              img build -t "${dockerRegistryAddress}"/ep/info-page:"${dockerImageTag}" .
              img push "${dockerRegistryAddress}"/ep/info-page:"${dockerImageTag}"
              """
            }
          }
        }
      }
    }
  }
}
