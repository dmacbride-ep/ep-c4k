// this bit is just plain Jenkins Groovy
def secretsDirectory = new File("/secret/jenkins-secrets").exists() ? new File("/secret/jenkins-secrets") : new File("/var/jenkins_secrets");
def randomLabel = "jenkins-worker-${UUID.randomUUID().toString()}"
def dockerRegistryAddress = new File(secretsDirectory, "dockerRegistryAddress").text.trim();
def jenkinsAgentImageTag = new File(secretsDirectory, "cloudOpsForKubernetesDefaultBranch").text.trim().replace('/','-');

// this is a workaround until this bug is fixed: https://issues.jenkins-ci.org/browse/JENKINS-56943
def podYamlFromFile = new File("${env.JENKINS_HOME}/workspace/create-or-delete-mysql-server@script/cloudops-for-kubernetes/jenkins/agents/kubernetes/docker-0.5gb-0.25core-1container.yaml").text.trim();
String podYaml = podYamlFromFile.replace('${dockerRegistryAddress}', "${dockerRegistryAddress}").replace('${jenkinsAgentImageTag}', "${jenkinsAgentImageTag}")

// this is the Pipeline DSL.
// Syntax here: https://jenkins.io/doc/book/pipeline/syntax/
// More useful docs: https://jenkins.io/doc/pipeline/steps/
pipeline {
  agent {
    kubernetes {
      label "${randomLabel}"
      defaultContainer "jnlp"
      yaml "${podYaml}"
    }
  }
  environment {
    TF_IN_AUTOMATION = "true"
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '10000'))
    timeout(time: 40, unit: 'MINUTES')
      }
  stages {
    stage('Validate job parameters') {
      steps {
        container('docker1') {
          script {
            if ( ! ("${params.serverName}" ==~ "^[a-zA-Z]+[\\w]+\$")) {
              error "serverName parameter must start with a letter and must be alphanumeric"
            }
            if ( ! ("${params.kubernetesNamespace}" ==~ "^[a-z0-9]([-a-z0-9]*[a-z0-9])\$")) {
              error "namespace parameter must be lower case alphanumeric characters or '-' and must start and end with an alphanumeric character"
            }
          }
        }
      }
    }
    stage('Preparation Stage') {
      steps {
        container('docker1') {
          script {
            eplib = load "cloudops-for-kubernetes/lib/eplib.groovy"
            eplib.loginToCloud()
            eplib.loginToKubernetesCluster("${params.clusterName}")
            eplib.loginToTerraform()

            terraformWorkspaceName = eplib.generateTerraformWorkspaceName("${params.clusterName}", "${params.kubernetesNamespace}", "mysql-server", "${params.serverName}")
            eplib.createTerraformWorkspaceAndKubernetesNamespace(terraformWorkspaceName, "${params.kubernetesNamespace}")

          }
        }
      }
    }
    stage('Create/delete MySQL server') {
      steps {
        container('docker1') {
          script {
            String terraformOperation = null
            if(params.deleteServer) {
              terraformOperation = "destroy"
            } else {
              terraformOperation = "apply"
            }
            labelledShell label: 'Run Terraform', script: """#!/bin/bash
              cd "${WORKSPACE}/cloudops-for-kubernetes/terraform/mysql-server"
              terraform init -get-plugins=false
              terraform workspace select ${terraformWorkspaceName}
              export TF_VAR_kubernetes_cluster_name="${params.clusterName}"
              export TF_VAR_kubernetes_namespace="${params.kubernetesNamespace}"
              export TF_VAR_database_name="${params.serverName}"
              export TF_VAR_resource_group="${resourceGroupName}"
              terraform ${terraformOperation} -var-file=credentials.tfvars -parallelism=50 -auto-approve -no-color -input=false
            """
          }
        }
      }
    }
    stage('Clean-up Stage') {
      steps {
        container('docker1') {
          script {
            eplib.deleteTerraformWorkspaceAndKubernetesNamespace(terraformWorkspaceName, "${params.kubernetesNamespace}")
          }
        }
      }
    }
  }
}
