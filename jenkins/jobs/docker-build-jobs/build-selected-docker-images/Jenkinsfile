// this bit is just plain Jenkins Groovy
def secretsDirectory = new File("/secret/jenkins-secrets").exists() ? new File("/secret/jenkins-secrets") : new File("/var/jenkins_secrets");
def randomUUID = "${UUID.randomUUID().toString()}"
def randomLabel = "jenkins-worker-${randomUUID}"
def dockerRegistryAddress = new File(secretsDirectory, "dockerRegistryAddress").text.trim();
def jenkinsAgentImageTag = new File(secretsDirectory, "cloudOpsForKubernetesDefaultBranch").text.trim().replace('/','-');

// this is a workaround until this bug is fixed: https://issues.jenkins-ci.org/browse/JENKINS-56943
def podYamlFromFile = new File("${env.JENKINS_HOME}/workspace/build-selected-docker-images@script/cloudops-for-kubernetes/jenkins/agents/kubernetes/docker-0.5gb-0.25core-1container.yaml").text.trim();
String podYaml = podYamlFromFile.replace('${dockerRegistryAddress}', "${dockerRegistryAddress}").replace('${jenkinsAgentImageTag}', "${jenkinsAgentImageTag}")

def runBuildJob(String epAppInBuild) {
  def retryAttempt = 0
  def jobName = 'build-' + epAppInBuild
  def parameters = [
    string(name: 'imageTag', value: params.imageTag),
    string(name: 'epAppInBuild', value: epAppInBuild),
    string(name: 'cloudOpsForKubernetesBranch', value: params.cloudOpsForKubernetesBranch),
    string(name: 'dockerBranch', value: params.dockerBranch),
    string(name: 'tomcatVersion', value: params.tomcatVersion),
    string(name: 'epCommerceBranch', value: params.epCommerceBranch),
    string(name: 'deploymentPackageUrl', value: params.deploymentPackageUrl)
  ]

  retry(5) {
    if (retryAttempt > 0) {
      // exponential backoff
      sleep 60 * (2**(retryAttempt-1));
    }
    retryAttempt += 1

    buildlib.buildLocalJob(jobName, parameters)
  }
}

// this is the Pipeline DSL.
// Syntax here: https://jenkins.io/doc/book/pipeline/syntax/
// More useful docs: https://jenkins.io/doc/pipeline/steps/
pipeline {
  agent {
    kubernetes {
      label "${randomLabel}"
      defaultContainer "jnlp"
      yaml "${podYaml}"
    }
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '10000'))
    timeout(time: 90, unit: 'MINUTES')
  }
  stages {
    stage('Load EP Groovy library') {
      steps {
        script {
          buildlib = load 'cloudops-for-kubernetes/lib/buildlib.groovy'
        }
      }
    }
    stage('Build and push Commerce, ActiveMQ, and MySQL images') {
      stages {
        stage('Build and push EP base images') {
          when { expression { return params.buildBase } }
          steps {
            script {
              runBuildJob("base-image")
            }
          }
        }
        stage('Build and push non-base images') {
          parallel {
            stage('Build and push the data-pop-tool image') {
              when { expression { return params.buildDatapop } }
              steps {
                script {
                  runBuildJob("data-pop")
                }
              }
            }
            stage('Build and push the mysql image') {
              when { expression { return params.buildMysql } }
              steps {
                script {
                  runBuildJob("mysql")
                }
              }
            }
            stage('Build and push the activemq image') {
              when { expression { return params.buildActivemq } }
              steps {
                script {
                  runBuildJob("activemq")
                }
              }
            }
            stage('Build and push the cortex image') {
              when { expression { return params.buildCortex } }
              steps {
                script {
                  runBuildJob("cortex")
                }
              }
            }
            stage('Build and push the search image') {
              when { expression { return params.buildSearch } }
              steps {
                script {
                  runBuildJob("search")
                }
              }
            }
            stage('Build and push the batch image') {
              when { expression { return params.buildBatch } }
              steps {
                script {
                  runBuildJob("batch")
                }
              }
            }
            stage('Build and push the integration image') {
              when { expression { return params.buildIntegration } }
              steps {
                script {
                  runBuildJob("integration")
                }
              }
            }
            stage('Build and push the cm image') {
              when { expression { return params.buildCm } }
              steps {
                script {
                  runBuildJob("cm")
                }
              }
            }
            stage('Build and push the data-sync image') {
              when { expression { return params.buildDatasync } }
              steps {
                script {
                  runBuildJob("data-sync")
                }
              }
            }
            stage('Build and push the info-page image') {
              when { expression { return params.infoPage } }
              steps {
                script {
                  runBuildJob("infopage")
                }
              }
            }
          }
        }
      }
    }
  }
}
