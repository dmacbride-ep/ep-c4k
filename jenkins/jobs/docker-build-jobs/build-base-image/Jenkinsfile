// this bit is just plain Jenkins Groovy
def secretsDirectory = new File("/secret/jenkins-secrets").exists() ? new File("/secret/jenkins-secrets") : new File("/var/jenkins_secrets");
def randomUUID = "${UUID.randomUUID().toString()}"
def randomLabel = "jenkins-worker-${randomUUID}"
def dockerRegistryAddress = new File(secretsDirectory, "dockerRegistryAddress").text.trim();
def jenkinsAgentImageTag = new File(secretsDirectory, "cloudOpsForKubernetesDefaultBranch").text.trim().replace('/','-');

// this is a workaround until this bug is fixed: https://issues.jenkins-ci.org/browse/JENKINS-56943
def podYamlFromFile = new File("${env.JENKINS_HOME}/workspace/build-base-image@script/cloudops-for-kubernetes/jenkins/agents/kubernetes/docker-4gb-2core-1container.yaml").text.trim();
String podYaml = podYamlFromFile.replace('${dockerRegistryAddress}', "${dockerRegistryAddress}").replace('${jenkinsAgentImageTag}', "${jenkinsAgentImageTag}")

def dockerRepoUrl = new File(secretsDirectory, "dockerRepoURL").text.trim()
def gitCredentialId = new File(secretsDirectory, "gitCredentialId").text.trim()

// this is the Pipeline DSL.
// Syntax here: https://jenkins.io/doc/book/pipeline/syntax/
// More useful docs: https://jenkins.io/doc/pipeline/steps/
pipeline {
  agent {
    kubernetes {
      label "${randomLabel}-1"
      defaultContainer "jnlp"
      yaml "${podYaml}"
    }
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '10000'))
    timeout(time: 90, unit: 'MINUTES')
  }
  stages {
    stage('Validate parameters and login to Docker registry') {
      steps {
        container('docker') {
          script {
            if(! params.tomcatVersion) throw new Exception("tomcatVersion parameter must be set")
            if(! params.dockerBranch) throw new Exception("dockerBranch parameter must be set")

            eplib = load "cloudops-for-kubernetes/lib/eplib.groovy"
            eplib.loginToCloud()
            eplib.loginToDockerRegistry()
          }
        }
      }
    }
    stage('Checkout EP Docker code') {
      steps {
        container('docker') {
          dir ('docker') {
            script {
              eplib.gitShallowClone(dockerRepoUrl, "${params.dockerBranch}", gitCredentialId);
            }
          }
        }
      }
    }
    stage('Build and push the base images') {
      steps {
        container('docker') {
          sh """
          cd docker/ThirdPartyBuildFiles/
          ./BaseImageBuilder.sh --tomcatversion ${params.tomcatVersion} \
                                --dockerRegistry ${dockerRegistryAddress} \
                                --namespace ep \
                                --useImg
          """
        }
      }
    }
  }
}
