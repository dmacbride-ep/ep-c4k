// this bit is just plain Jenkins Groovy
def secretsDirectory = new File("/secret/jenkins-secrets").exists() ? new File("/secret/jenkins-secrets") : new File("/var/jenkins_secrets");
def randomUUID = "${UUID.randomUUID().toString()}"
def randomLabel = "jenkins-worker-${randomUUID}"
def dockerRegistryAddress = new File(secretsDirectory, "dockerRegistryAddress").text.trim();
def jenkinsAgentImageTag = new File(secretsDirectory, "cloudOpsForKubernetesDefaultBranch").text.trim().replace('/','-');

def sharedSteps() {
  // load EP Groovy Library
  eplib = load "cloudops-for-kubernetes/lib/eplib.groovy"
  buildlib = load "cloudops-for-kubernetes/lib/buildlib.groovy"

  eplib.loginToCloud()
  eplib.loginToDockerRegistry()
}

def runBuildJob(String epAppInBuild) {
  build job: 'build-' + epAppInBuild,
    parameters: [string(name: 'epAppInBuild', value: epAppInBuild),
    string(name: 'cloudOpsForKubernetesRepoURL', value: params.cloudOpsForKubernetesRepoURL),
    string(name: 'cloudOpsForKubernetesBranch', value: params.cloudOpsForKubernetesBranch),
    string(name: 'dockerRepoURL', value: params.dockerRepoURL),
    string(name: 'dockerBranch', value: params.dockerBranch),
    string(name: 'dockerCredentialId', value: params.dockerCredentialId),
    string(name: 'tomcatVersion', value: params.tomcatVersion),
    string(name: 'epCommerceRepoURL', value: params.epCommerceRepoURL),
    string(name: 'epCommerceBranch', value: params.epCommerceBranch),
    string(name: 'deploymentPackageUrl', value: params.deploymentPackageUrl)
    ]
}

// this is a workaround until this bug is fixed: https://issues.jenkins-ci.org/browse/JENKINS-56943
def podYamlFromFile = new File("${env.JENKINS_HOME}/workspace/build-docker-images@script/cloudops-for-kubernetes/jenkins/agents/kubernetes/docker-4gb-2core-1container.yaml").text.trim();
String podYaml = podYamlFromFile.replace('${dockerRegistryAddress}', "${dockerRegistryAddress}").replace('${jenkinsAgentImageTag}', "${jenkinsAgentImageTag}")

// this is the Pipeline DSL.
// Syntax here: https://jenkins.io/doc/book/pipeline/syntax/
// More useful docs: https://jenkins.io/doc/pipeline/steps/
pipeline {
  agent none
  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '10000'))
    timeout(time: 90, unit: 'MINUTES')
      }
  environment {
    dockerImageTag = "${params.dockerBranch}".replace('/','-');
    // customization point to not have to build all images for every run
    buildBase        = "${params.buildBase}"
    buildDatapop     = "${params.buildDatapop}"
    buildMysql       = "${params.buildMysql}"
    buildCortex      = "${params.buildCortex}"
    buildSearch      = "${params.buildSearch}"
    buildBatch       = "${params.buildBatch}"
    buildIntegration = "${params.buildIntegration}"
    buildCm          = "${params.buildCm}"
    buildDatasync    = "${params.buildDatasync}"
    buildActivemq    = "${params.buildActivemq}"
    infoPage         = "${params.infoPage}"
  }
  stages {
    stage('Build and push the app, activemq, and mysql images') {
      stages {
        stage('Build and push the base images') {
          steps {
            script {
              if ( "${buildBase}" == "true" ) {
                runBuildJob("base-image");
              }
            }
          }
        }
        stage('build and push all other images') {
          parallel{
            stage('Build and push the data-pop-tool image') {
              steps {
                script {
                  if ( "${buildDatapop}" == "true" ) {
                    runBuildJob("data-pop");
                  }
                }
              }
            }
            stage('Build and push the mysql image') {
              steps {
                script {
                  if ( "${buildMysql}" == "true" ) {
                    runBuildJob("mysql");
                  }
                }
              }
            }
            stage('Build and push the activemq image') {
              steps {
                script {
                  if ( "${buildActivemq}" == "true" ) {
                    runBuildJob("activemq");
                  }
                }
              }
            }
            stage('Build and push the cortex image') {
              steps {
                script {
                  if ( "${buildCortex}" == "true" ) {
                    retry(2){
                      runBuildJob("cortex");
                    }
                  }
                }
              }
            }
            stage('Build and push the search image') {
              steps {
                script {
                  if ( "${buildSearch}" == "true" ) {
                    runBuildJob("search");
                  }
                }
              }
            }
            stage('Build and push the batch image') {
              steps {
                script {
                  if ( "${buildBatch}" == "true" ) {
                    runBuildJob("batch");
                  }
                }
              }
            }
            stage('Build and push the integration image') {
              steps {
                script {
                  if ( "${buildIntegration}" == "true" ) {
                    runBuildJob("integration");
                  }
                }
              }
            }
            stage('Build and push the cm image') {
              steps {
                script {
                  if ( "${buildCm}" == "true" ) {
                    runBuildJob("cm");
                  }
                }
              }
            }
            stage('Build and push the data-sync image') {
              steps {
                script {
                  if ( "${params.buildDatasync}" == "true" ) {
                    runBuildJob("data-sync");
                  }
                }
              }
            }
            stage('Build and push the info page image') {
              steps {
                script {
                  if ( "${infoPage}" == "true" ) {
                    runBuildJob("infopage");
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
