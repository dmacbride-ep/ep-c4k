// this bit is just plain Jenkins Groovy
def secretsDirectory = new File("/secret/jenkins-secrets").exists() ? new File("/secret/jenkins-secrets") : new File("/var/jenkins_secrets");
def randomLabel = "jenkins-worker-${UUID.randomUUID().toString()}"
def dockerRegistryAddress = new File(secretsDirectory, "dockerRegistryAddress").text.trim();
def jenkinsAgentImageTag = new File(secretsDirectory, "cloudOpsForKubernetesDefaultBranch").text.trim().replace('/','-');

// this is a workaround until this bug is fixed: https://issues.jenkins-ci.org/browse/JENKINS-56943
def podYamlFromFile = new File("${env.JENKINS_HOME}/workspace/deploy-or-delete-ep-stack@script/cloudops-for-kubernetes/jenkins/agents/kubernetes/docker-0.5gb-0.25core-1container.yaml").text.trim();
String podYaml = podYamlFromFile.replace('${dockerRegistryAddress}', "${dockerRegistryAddress}").replace('${jenkinsAgentImageTag}', "${jenkinsAgentImageTag}")

// this is the Pipeline DSL.
// Syntax here: https://jenkins.io/doc/book/pipeline/syntax/
// More useful docs: https://jenkins.io/doc/pipeline/steps/
pipeline {
  agent {
    kubernetes {
      label "${randomLabel}"
      defaultContainer "jnlp"
      yaml "${podYaml}"
    }
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '10000'))
    timeout(time: 40, unit: 'MINUTES')
      }
  environment {
    fullDomainName = "${params.dnsSubDomain}.${params.clusterName}.${params.dnsZoneName}"
    TF_IN_AUTOMATION = "true"
  }
  stages {
    stage('Check job parameters') {
      steps {
        container('docker1') {
          script {
            if ( ! ("${params.kubernetesNamespace}" ==~ "^[a-z0-9]([-a-z0-9]*[a-z0-9])\$")) {
              error "namespace parameter must be lower case alphanumeric characters or '-' and must start and end with an alphanumeric character"
            }
            if ( ! ("${params.cmAllowedCIDR}" ==~ "^\\s*\$|^([0-9]{1,3}.){3}[0-9]{1,3}/32(,\\s([0-9]{1,3}.){3}[0-9]{1,3}/32)*\$")) {
              error "cmAllowedCIDR parameter must be a comma separated network CIDR (for example: 5.6.7.8/32)"
            }
            if ( ! ("${params.integrationAllowedCIDR}" ==~ "^\\s*\$|^([0-9]{1,3}.){3}[0-9]{1,3}/32(,\\s([0-9]{1,3}.){3}[0-9]{1,3}/32)*\$")) {
              error "integrationAllowedCIDR parameter must be a comma separated network CIDR (for example: 5.6.7.8/32)"
            }
            if ( ! ("${params.cortexAllowedCIDR}" ==~ "^\\s*\$|^([0-9]{1,3}.){3}[0-9]{1,3}/32(,\\s([0-9]{1,3}.){3}[0-9]{1,3}/32)*\$")) {
              error "cortexAllowedCIDR parameter must be a comma separated network CIDR (for example: 5.6.7.8/32)"
            }
            if ( ! ("${params.studioAllowedCIDR}" ==~ "^\\s*\$|^([0-9]{1,3}.){3}[0-9]{1,3}/32(,\\s([0-9]{1,3}.){3}[0-9]{1,3}/32)*\$")) {
              error "studioAllowedCIDR parameter must be a comma separated network CIDR (for example: 5.6.7.8/32)"
            }
            if ( ! ("${params.infoPageAllowedCIDR}" ==~ "^\\s*\$|^([0-9]{1,3}.){3}[0-9]{1,3}/32(,\\s([0-9]{1,3}.){3}[0-9]{1,3}/32)*\$")) {
              error "infoPageAllowedCIDR parameter must be a comma separated network CIDR (for example: 5.6.7.8/32)"
            }
            if ("${params.dockerImageTag}" ==~ "^[aA-zZ0-9]+/[aA-zZ0-9]*\$") {
              error "docker image tags cannot have '/' in the middle or end"
            }
            if ( ! ("${params.dnsSubDomain}" ==~ "^(([a-zA-Z]?(-?[a-zA-Z0-9])*)\\.)*[a-zA-Z0-9](-?[a-zA-Z0-9])*[a-zA-Z0-9]\$")) {
              error "dns sub domain can only contain alpha-numeric characters, hyphens and '.' "
            }
            if ( params.deployDstWebapp == true ) {
              if ( ! ("${params.targetNamespace}" ==~ "^[a-z0-9]([-a-z0-9]*[a-z0-9])\$")) {
                error "namespace parameter must be lower case alphanumeric characters or '-' and must start and end with an alphanumeric character"
              }
              if ( ! ("${params.targetDBServerName}" ==~ "^[a-zA-Z]+[\\w]+\$")) {
                error "targetDBServerName parameter must start with a letter and must be alphanumeric"
              }
              if ( ! ("${params.targetJMSServerName}" ==~ "^[a-zA-Z]+[\\w]+\$")) {
                error "targetJMSServerName parameter must start with a letter and must be alphanumeric"
              }
            }
            if ( ! ("${params.dbServerName}" ==~ "^[a-zA-Z]+[\\w]+\$")) {
              error "dbServerName parameter must start with a letter and must be alphanumeric"
            }
            if ( ! ("${params.jmsServerName}" ==~ "^[a-zA-Z]+[\\w]+\$")) {
              error "jmsServerName parameter must start with a letter and must be alphanumeric"
            }
            def digResult = labelledShell(label: 'check that the full domain name can be resolved', returnStdout: true, script: """
              dig "${fullDomainName}" | grep 'ANSWER SECTION'
            """).trim();
            if (digResult == "") {
              error "dns domain ${fullDomainName} did not give an answer."
            }
          }
        }
      }
    }
    stage('Preparation Stage') {
      steps {
        container('docker1') {
          script {
            eplib = load "cloudops-for-kubernetes/lib/eplib.groovy"
            eplib.loginToCloud()
            eplib.loginToKubernetesCluster("${params.clusterName}")
            eplib.loginToTerraform()

            terraformWorkspaceName = eplib.generateTerraformWorkspaceName("${params.clusterName}", "${params.kubernetesNamespace}", "ep-stack")
            eplib.createTerraformWorkspaceAndKubernetesNamespace(terraformWorkspaceName, "${params.kubernetesNamespace}")
          }
        }
      }
    }
    stage('Create/delete the EP stack and selection options') {
      steps {
        container('docker1') {
          script {
            String terraformOperation = null
            if(params.deleteStack) {
              terraformOperation = "destroy"
            } else {
              terraformOperation = "apply"
            }
            labelledShell label: 'Run Terraform', script: """#!/bin/bash
              cd "${WORKSPACE}/cloudops-for-kubernetes/terraform/ep-stack"
              terraform init -get-plugins=false
              terraform workspace select ${terraformWorkspaceName}

              # EP stack ConfigMap, Deployments, and Services
              export TF_VAR_docker_image_tag="${params.dockerImageTag}"
              export TF_VAR_enable_debug="${params.enableDebug}"
              export TF_VAR_enable_jmx="${params.enableJmx}"
              export TF_VAR_database_name="${params.dbServerName}"
              export TF_VAR_ep_resourcing_profile="${params.epStackResourcingProfile}"
              export TF_VAR_ep_smtp_host="${params.smtpHost}"
              export TF_VAR_ep_smtp_port="${params.smtpPort}"
              export TF_VAR_ep_smtp_scheme="${params.smtpScheme}"
              export TF_VAR_ep_smtp_user="${params.smtpUser}"
              export TF_VAR_ep_smtp_pass="${params.smtpPass}"
              export TF_VAR_ep_tests_enable_ui="${params.enableUITests}"
              export TF_VAR_ep_changesets_enabled="${params.epChangesetsEnabled}"
              export TF_VAR_ep_commerce_envname="${params.epEnvironment}"
              export TF_VAR_ep_x_jvm_args=""
              export TF_VAR_jms_name="${params.jmsServerName}"
              export TF_VAR_jmx_auth="${params.enableJmxAuth}"
              export TF_VAR_kubernetes_namespace="${params.kubernetesNamespace}"
              export TF_VAR_namespace="/ep"
              export TF_VAR_registry_address="${dockerRegistryAddress}"

              # Data Sync Tool
              export TF_VAR_deploy_dst_webapp="${params.deployDstWebapp}"
              export TF_VAR_target_jms_name="${params.targetJMSServerName}"
              export TF_VAR_target_namespace="${params.targetNamespace}"

              # Target Database Secret
              export TF_VAR_target_database_name="${params.targetDBServerName}"

              # Info Page
              export TF_VAR_cluster_name="${params.clusterName}"
              export TF_VAR_dns_sub_domain="${params.dnsSubDomain}"
              export TF_VAR_full_domain_name="${fullDomainName}"
              export TF_VAR_include_deployment_info_page="${params.includeDeploymentInfoPage}"
              export TF_VAR_info_page_allowed_cidr="${params.infoPageAllowedCIDR}"

              # Horizontal Pod Autoscalers
              export TF_VAR_include_horizontal_pod_autoscalers="${params.includeHorizontalPodAutoscalers}"

              # Ingresses
              export TF_VAR_include_ingresses="${params.includeIngresses}"
              export TF_VAR_cm_allowed_cidr="${params.cmAllowedCIDR}"
              export TF_VAR_integration_allowed_cidr="${params.integrationAllowedCIDR}"
              export TF_VAR_cortex_allowed_cidr="${params.cortexAllowedCIDR}"
              export TF_VAR_studio_allowed_cidr="${params.studioAllowedCIDR}"

              terraform ${terraformOperation} -var-file=credentials.tfvars -parallelism=50 -auto-approve -no-color -input=false
            """
          }
        }
      }
    }
    stage('Clean-up Stage') {
      steps {
        container('docker1') {
          script {
            eplib.deleteTerraformWorkspaceAndKubernetesNamespace(terraformWorkspaceName, "${params.kubernetesNamespace}")
          }
        }
      }
    }
  }
}
